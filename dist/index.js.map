{"version":3,"sources":["../src/actions.ts","../src/okx/core/client.ts","../src/index.ts"],"sourcesContent":["// src/actions.ts\nimport {\n    generateText,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    composeContext,\n    type Action,\n    type ActionExample,\n} from \"@elizaos/core\";\nimport { OKXDexClient } from \"../src/okx/core/client\";\nimport {\n    TokenInfo,\n    APIResponse,\n    FormattedSwapResponse,\n    QuoteData,\n    TokenListInfo,\n    SwapExecutionData,\n} from \"./okx/types\";\n\n// Validate and format Solana address\nfunction formatSolanaAddress(address: string): string {\n    // Remove any whitespace\n    address = address.trim();\n\n    // Handle native SOL case\n    if (address.toLowerCase() === \"11111111111111111111111111111111\") {\n        return \"11111111111111111111111111111111\";\n    }\n\n    // Special case for SOL\n    if (address.toLowerCase() === \"sol\") {\n        return \"11111111111111111111111111111111\";\n    }\n\n    // Basic validation for Solana address format\n    if (!/^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address)) {\n        throw new Error(`Invalid Solana address format: ${address}`);\n    }\n\n    // Keep original casing as Solana addresses are case-sensitive\n    return address;\n}\n\nasync function extractSwapParams(message: Memory, client: OKXDexClient) {\n    // Parse message content\n    let messageContent = \"\";\n    if (typeof message.content === \"string\") {\n        messageContent = message.content;\n    } else if (message.content && typeof message.content === \"object\") {\n        messageContent =\n            (message.content as any).text || JSON.stringify(message.content);\n    }\n\n    console.log(\"Processing message content:\", messageContent);\n    messageContent = messageContent.trim();\n\n    // Extract amount and tokens with more flexible patterns\n    const patterns = [\n        // Match \"300 <address> to <address>\"\n        /(?:quote|swap)?\\s*(?:for)?\\s*([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\s*([\\w.-]+)\\s*(?:to|for|->|=>)\\s*([\\w.-]+)/i,\n        // Match \"from <address> to <address> amount 300\"\n        /from\\s*([\\w.-]+)\\s*(?:to|for|->|=>)\\s*([\\w.-]+)\\s*(?:amount|quantity)?\\s*([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/i,\n        // Legacy format\n        /from_token:\\s*([\\w.-]+)\\s*to_token:\\s*([\\w.-]+)\\s*amount:\\s*([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/i,\n    ];\n\n    let fromToken = \"\";\n    let toToken = \"\";\n    let amount = \"\";\n\n    // Try each pattern\n    for (const pattern of patterns) {\n        const match = messageContent.match(pattern);\n        if (match) {\n            if (pattern.source.startsWith(\"from\")) {\n                [, fromToken, toToken, amount] = match;\n            } else {\n                [, amount, fromToken, toToken] = match;\n            }\n            console.log(\"Pattern matched:\", {\n                pattern: pattern.source,\n                fromToken,\n                toToken,\n                amount,\n            });\n            break;\n        }\n    }\n\n    // If not found in combined patterns, try individual patterns\n    if (!amount || !fromToken || !toToken) {\n        const amountMatch = messageContent.match(\n            /([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/,\n        );\n        const fromMatch =\n            messageContent.match(/from\\s*([\\w.-]+)/i) ||\n            messageContent.match(/(?:^|\\s)([\\w.-]+)(?:\\s|$)/);\n        const toMatch = messageContent.match(/to\\s*([\\w.-]+)/i);\n\n        amount = amount || amountMatch?.[1] || \"\";\n        fromToken = fromToken || fromMatch?.[1] || \"\";\n        toToken = toToken || toMatch?.[1] || \"\";\n    }\n\n    // Format addresses\n    try {\n        fromToken = formatSolanaAddress(fromToken);\n        toToken = formatSolanaAddress(toToken);\n    } catch (error) {\n        throw new Error(\n            `Address format error: ${error instanceof Error ? error.message : String(error)}`,\n        );\n    }\n\n    console.log(\"Processed tokens:\", { fromToken, toToken });\n\n    // Basic validation\n    if (!fromToken) {\n        throw new Error(\n            \"Could not determine the source token address. \" +\n                \"Please provide a valid Solana token address. \" +\n                \"Example: 'quote for 300 EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v to 6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN'\",\n        );\n    }\n\n    if (!toToken) {\n        throw new Error(\n            \"Could not determine the target token address. \" +\n                \"Please provide a valid Solana token address. \" +\n                \"Example: 'quote for 300 EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v to 6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN'\",\n        );\n    }\n\n    if (!amount) {\n        throw new Error(\n            \"Could not determine the amount to swap. \" +\n                \"Please specify the amount. \" +\n                \"Example: 'quote for 300 EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v to 6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN'\",\n        );\n    }\n\n    try {\n        // Get the quote first to get token decimals\n        const preQuote = await client.dex.getQuote({\n            chainId: \"501\",\n            fromTokenAddress: fromToken,\n            toTokenAddress: toToken,\n            amount: \"10000000000\", // Dummy amount to get token info\n            slippage: \"0.1\",\n        });\n\n        if (preQuote.code !== \"0\" || !preQuote.data?.[0]) {\n            throw new Error(preQuote.msg || \"Failed to get token information\");\n        }\n\n        // Get decimals from the response\n        const fromDecimals = parseInt(preQuote.data[0].fromToken.decimal);\n\n        // Parse amount and convert to smallest unit\n        const parsedAmount = parseFloat(amount);\n        if (isNaN(parsedAmount)) {\n            throw new Error(`Invalid amount value: ${amount}`);\n        }\n\n        // Convert to smallest unit using the correct decimals\n        const amountInSmallestUnit = Math.floor(\n            parsedAmount * Math.pow(10, fromDecimals),\n        ).toString();\n\n        console.log(\"Conversion details:\", {\n            originalAmount: amount,\n            parsedAmount,\n            fromDecimals,\n            amountInSmallestUnit,\n        });\n\n        return {\n            fromTokenAddress: fromToken,\n            toTokenAddress: toToken,\n            amount: amountInSmallestUnit,\n        };\n    } catch (error) {\n        console.error(\"Error in extractSwapParams:\", error);\n        throw new Error(\n            `Failed to process swap parameters: ${error instanceof Error ? error.message : String(error)}`,\n        );\n    }\n}\nfunction formatQuoteResponse(\n    data: QuoteData | SwapExecutionData,\n): FormattedSwapResponse {\n    // Extract the relevant data whether it's a quote or swap response\n    const quote = \"routerResult\" in data ? data.routerResult : data;\n\n    // Get decimals from the response\n    const fromDecimals = parseInt(quote.fromToken.decimal);\n    const toDecimals = parseInt(quote.toToken.decimal);\n\n    // Convert amounts using the decimals from the response\n    const displayFromAmount = (\n        Number(quote.fromTokenAmount) / Math.pow(10, fromDecimals)\n    ).toFixed(6);\n\n    const displayToAmount = (\n        Number(quote.toTokenAmount) / Math.pow(10, toDecimals)\n    ).toFixed(6);\n\n    return {\n        success: true,\n        quote: {\n            fromToken: {\n                symbol: quote.fromToken.tokenSymbol,\n                amount: displayFromAmount,\n                decimal: quote.fromToken.decimal,\n                unitPrice: quote.fromToken.tokenUnitPrice,\n            },\n            toToken: {\n                symbol: quote.toToken.tokenSymbol,\n                amount: displayToAmount,\n                decimal: quote.toToken.decimal,\n                unitPrice: quote.toToken.tokenUnitPrice,\n            },\n            priceImpact: quote.priceImpactPercentage + \"%\",\n            dexRoutes: quote.quoteCompareList.map((route) => ({\n                dex: route.dexName,\n                amountOut: route.amountOut,\n                fee: route.tradeFee,\n            })),\n        },\n\n        summary:\n            `Quote for ${displayFromAmount} ${quote.fromToken.tokenSymbol} to ${quote.toToken.tokenSymbol}:\\n` +\n            `Expected output: ${displayToAmount} ${quote.toToken.tokenSymbol}\\n` +\n            `Price impact: ${quote.priceImpactPercentage}%`,\n    };\n}\n\nfunction getActionHandler(\n    actionName: string,\n    actionDescription: string,\n    client: OKXDexClient,\n) {\n    return async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        options?: Record<string, unknown>,\n        callback?: HandlerCallback,\n    ): Promise<boolean> => {\n        let currentState = state ?? (await runtime.composeState(message));\n        currentState = await runtime.updateRecentMessageState(currentState);\n\n        try {\n            let result;\n\n            switch (actionName) {\n                case \"GET_CHAIN_DATA\":\n                    const chainData =\n                        await client.dex.getChainData(\"501\");\n                    result = {\n                        chains: chainData.data.map((chain) => ({\n                            id: chain.chainId,\n                            name: chain.chainName,\n                            dexApprovalAddress:\n                                chain.dexTokenApproveAddress || null,\n                        })),\n                    };\n                    break;\n\n                case \"GET_LIQUIDITY_PROVIDERS\":\n                    result = await client.dex.getLiquidity(\"501\");\n                    break;\n\n                case \"GET_SWAP_QUOTE\": {\n                    const params = await extractSwapParams(message, client);\n                    console.log(\"Sending quote request with params:\", params);\n\n                    const quoteResult = await client.dex.getQuote({\n                        chainId: \"501\",\n                        fromTokenAddress: params.fromTokenAddress,\n                        toTokenAddress: params.toTokenAddress,\n                        amount: params.amount,\n                        slippage: \"0.1\",\n                        userWalletAddress: process.env.OKX_WALLET_ADDRESS,\n                    });\n\n                    console.log(\n                        \"Received quote result:\",\n                        JSON.stringify(quoteResult, null, 2),\n                    );\n\n                    if (quoteResult.code === \"0\" && quoteResult.data?.[0]) {\n                        result = formatQuoteResponse(quoteResult.data[0]);\n                    } else {\n                        throw new Error(\n                            quoteResult.msg || \"Failed to get quote\",\n                        );\n                    }\n                    break;\n                }\n\n                case \"GET_SWAP_TRANSACTION_DATA\": {\n                    const params = await extractSwapParams(message, client);\n\n                    const swapResponse = await client.dex.getSwapData({\n                        chainId: \"501\",\n                        fromTokenAddress: params.fromTokenAddress,\n                        toTokenAddress: params.toTokenAddress,\n                        amount: params.amount,\n                        slippage: \"0.5\",\n                        // autoSlippage: true,\n                        // maxAutoSlippage: \"1000\",\n                        userWalletAddress: process.env.OKX_WALLET_ADDRESS,\n                    });\n\n                    if (swapResponse.code !== \"0\" || !swapResponse.data?.[0]) {\n                        throw new Error(\n                            swapResponse.msg ||\n                                \"Failed to get swap transaction data\",\n                        );\n                    }\n\n                    result = formatQuoteResponse(swapResponse.data[0]);\n\n                    const swapData = swapResponse.data[0];\n    \n                    // Extract transaction data\n                    const transactionData = {\n                        chainId: swapData.routerResult.chainId,\n                        estimateGasFee: swapData.routerResult.estimateGasFee,\n                        tx: swapData.tx || null\n                    };\n                \n                    const txData = {\n                        ...formatQuoteResponse(swapData),\n                        transaction: transactionData\n                    };\n                    console.log('OKX Swap Result:', JSON.stringify(txData, null, 2));\n\n                    break;\n                }\n\n                case \"GET_AVAILABLE_TOKENS\":\n                    result = await client.dex.getTokens(\"501\");\n                    break;\n\n                case \"EXECUTE_SWAP\": {\n                    const params = await extractSwapParams(message, client);\n                    console.log(\"Getting swap data with params:\", params);\n\n                    // First get the swap data with proper parameters\n                    const swapResponse = await client.dex.getSwapData({\n                        chainId: \"501\",\n                        fromTokenAddress: params.fromTokenAddress,\n                        toTokenAddress: params.toTokenAddress,\n                        amount: params.amount,\n                        slippage: \"0.5\",\n                        userWalletAddress: process.env.OKX_WALLET_ADDRESS,\n                    });\n\n                    console.log(\n                        \"Received swap data response:\",\n                        JSON.stringify(swapResponse, null, 2),\n                    );\n\n                    if (swapResponse.code !== \"0\" || !swapResponse.data?.[0]) {\n                        throw new Error(\n                            swapResponse?.msg || \"Failed to get swap data\",\n                        );\n                    }\n\n                    // Get the router result which contains our token data\n                    const routerResult = swapResponse.data[0];\n                    const txData = swapResponse.data[0].tx;\n\n                    if (\n                        !routerResult.routerResult?.fromToken?.decimal ||\n                        !routerResult.routerResult?.toToken?.decimal\n                    ) {\n                        console.error(\n                            \"Missing decimal information in token data:\",\n                            routerResult,\n                        );\n                        throw new Error(\"Invalid token decimal information\");\n                    }\n\n                    // Format the amounts for display using actual token decimal data\n                    const { routerResult: swapResult } = routerResult;\n                    const fromDecimals = parseInt(swapResult.fromToken.decimal);\n                    const toDecimals = parseInt(swapResult.toToken.decimal);\n\n                    const displayFromAmount = (\n                        parseFloat(swapResult.fromTokenAmount) /\n                        Math.pow(10, fromDecimals)\n                    ).toFixed(6);\n\n                    const displayToAmount = (\n                        parseFloat(swapResult.toTokenAmount) /\n                        Math.pow(10, toDecimals)\n                    ).toFixed(6);\n\n                    console.log(\"Executing swap with data:\", {\n                        fromToken: swapResult.fromToken.tokenSymbol,\n                        toToken: swapResult.toToken.tokenSymbol,\n                        fromAmount: displayFromAmount,\n                        expectedOutput: displayToAmount,\n                        priceImpact: swapResult.priceImpactPercentage,\n                    });\n\n                    // Execute the swap with the same parameters\n                    const executeResult = await client.dex.executeSwap({\n                        chainId: \"501\",\n                        fromTokenAddress: params.fromTokenAddress,\n                        toTokenAddress: params.toTokenAddress,\n                        amount: params.amount,\n                        slippage: \"0.5\",\n                        userWalletAddress: process.env.OKX_WALLET_ADDRESS,\n                    });\n\n                    // Format the result for display\n                    const formattedResult = {\n                        success: executeResult.success,\n                        transaction: {\n                            id: executeResult.transactionId,\n                            explorerUrl: executeResult.explorerUrl,\n                        },\n                        swapDetails: {\n                            fromToken: {\n                                symbol: swapResult.fromToken.tokenSymbol,\n                                amount: displayFromAmount,\n                                decimal: swapResult.fromToken.decimal,\n                            },\n                            toToken: {\n                                symbol: swapResult.toToken.tokenSymbol,\n                                amount: displayToAmount,\n                                decimal: swapResult.toToken.decimal,\n                            },\n                            priceImpact: swapResult.priceImpactPercentage + \"%\",\n                            route:\n                                swapResult.quoteCompareList[0]?.dexName ||\n                                \"Unknown\",\n                            txData: txData?.data,\n                        },\n                        summary:\n                            `Swap executed successfully!\\n` +\n                            `Swapped ${displayFromAmount} ${swapResult.fromToken.tokenSymbol} for approximately ${displayToAmount} ${swapResult.toToken.tokenSymbol}\\n` +\n                            `Price Impact: ${swapResult.priceImpactPercentage}%\\n` +\n                            `Transaction ID: ${executeResult.transactionId}\\n` +\n                            `View on Explorer: ${executeResult.explorerUrl}`,\n                    };\n\n                    result = formattedResult;\n                    break;\n                }\n\n                default:\n                    throw new Error(`Unknown action: ${actionName}`);\n            }\n\n            const response = await generateText({\n                runtime,\n                context: composeContext({\n                    state: currentState,\n                    template: JSON.stringify(result),\n                }),\n                modelClass: ModelClass.SMALL,\n            });\n\n            callback?.({\n                text: response,\n                content: result,\n            });\n            return true;\n        } catch (error) {\n            const errorMessage =\n                error instanceof Error ? error.message : String(error);\n            const errorResponse = await generateText({\n                runtime,\n                context: composeContext({\n                    state: currentState,\n                    template: `Error: ${errorMessage}`,\n                }),\n                modelClass: ModelClass.SMALL,\n            });\n\n            callback?.({\n                text: errorResponse,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    };\n}\n\nexport async function getOKXActions(\n    getSetting: (key: string) => string | undefined,\n) {\n    const actionsWithoutHandler: Omit<Action, \"handler\">[] = [\n        {\n            name: \"GET_CHAIN_DATA\",\n            description: \"Get Solana chain data from OKX DEX\",\n            similes: [],\n            validate: async () => true,\n            examples: [],\n        },\n        {\n            name: \"GET_LIQUIDITY_PROVIDERS\",\n            description: \"Get liquidity providers on Solana from OKX DEX\",\n            similes: [],\n            validate: async () => true,\n            examples: [],\n        },\n        {\n            name: \"GET_SWAP_QUOTE\",\n            description: \"Get a swap quote for tokens on Solana\",\n            similes: [],\n            validate: async () => true,\n            examples: [\n                [\n                    {\n                        user: \"user\",\n                        content: {\n                            text: \"Get quote from_token: SOL123 to_token: USDC456 amount: 1.5\",\n                        },\n                    },\n                    {\n                        user: \"assistant\",\n                        content: {\n                            text: \"Getting quote for swapping 1.5 SOL123 to USDC456...\",\n                        },\n                    },\n                ],\n                [\n                    {\n                        user: \"user\",\n                        content: {\n                            text: \"Get quote from SOL123 to USDC456 amount 1.5\",\n                        },\n                    },\n                    {\n                        user: \"assistant\",\n                        content: {\n                            text: \"Fetching quote for 1.5 tokens from SOL123 to USDC456...\",\n                        },\n                    },\n                ],\n            ],\n        },\n        {\n            name: \"GET_SWAP_TRANSACTION_DATA\",\n            description: \"Get swap transaction data for tokens on Solana\",\n            similes: [],\n            validate: async () => true,\n            examples: [\n                [\n                    {\n                        user: \"user\",\n                        content: {\n                            text: \"Get swap transaction data from_token: SOL123 to_token: USDC456 amount: 1.5\",\n                        },\n                    },\n                    {\n                        user: \"assistant\",\n                        content: {\n                            text: \"Getting swap transaction data for 1.5 SOL123 to USDC456...\",\n                        },\n                    },\n                ],\n            ],\n        },\n        {\n            name: \"GET_AVAILABLE_TOKENS\",\n            description: \"Get available tokens for swapping on Solana\",\n            similes: [],\n            validate: async () => true,\n            examples: [],\n        },\n        {\n            name: \"EXECUTE_SWAP\",\n            description: \"Execute a token swap on Solana using OKX DEX\",\n            similes: [],\n            validate: async () => true,\n            examples: [\n                [\n                    {\n                        user: \"user\",\n                        content: {\n                            text: \"Swap from_token: SOL123 to_token: USDC456 amount: 1.5\",\n                        },\n                    },\n                    {\n                        user: \"assistant\",\n                        content: {\n                            text: \"Executing swap of 1.5 tokens from SOL123 to USDC456...\",\n                        },\n                    },\n                ],\n                [\n                    {\n                        user: \"user\",\n                        content: { text: \"Swap 1.5 from SOL123 to USDC456\" },\n                    },\n                    {\n                        user: \"assistant\",\n                        content: {\n                            text: \"Processing swap of 1.5 tokens from SOL123 to USDC456...\",\n                        },\n                    },\n                ],\n            ],\n        },\n    ];\n\n    const client = new OKXDexClient({\n        apiKey: getSetting(\"OKX_API_KEY\")!,\n        secretKey: getSetting(\"OKX_SECRET_KEY\")!,\n        apiPassphrase: getSetting(\"OKX_API_PASSPHRASE\")!,\n        projectId: getSetting(\"OKX_PROJECT_ID\")!,\n        solana: {\n            connection: {\n                rpcUrl: getSetting(\"OKX_SOLANA_RPC_URL\")!,\n                // wsEndpoint: getSetting(\"OKX_WS_ENDPONT\"),\n            },\n            privateKey: getSetting(\"OKX_WALLET_PRIVATE_KEY\")!,\n        },\n    });\n\n    return actionsWithoutHandler.map((action) => ({\n        ...action,\n        handler: getActionHandler(action.name, action.description, client),\n    }));\n}\n","// src/core/client.ts\nimport { DexAPI, BridgeAPI } from '@okx-dex/okx-dex-sdk';\nimport { HTTPClient } from '@okx-dex/okx-dex-sdk/dist/core/http-client';\nimport type { OKXConfig } from \"../types\";\nimport { Keypair } from \"@solana/web3.js\";\nimport base58 from \"bs58\";\n\nexport class OKXDexClient {\n    public dex: DexAPI;\n    public bridge: BridgeAPI;\n\n    constructor(config: OKXConfig) {\n        const defaultConfig = {\n            baseUrl: \"https://www.okx.com\",\n            maxRetries: 3,\n            timeout: 30000,\n            ...config,\n        };\n\n        const configWithWallet = {\n            ...defaultConfig,\n            solana: defaultConfig.solana ? {\n                ...defaultConfig.solana,\n                walletAddress: Keypair.fromSecretKey(\n                    base58.decode(defaultConfig.solana.privateKey)\n                ).publicKey.toString()\n            } : undefined\n        };\n\n        const httpClient = new HTTPClient(configWithWallet);\n        this.dex = new DexAPI(httpClient, configWithWallet);\n        this.bridge = new BridgeAPI(httpClient);\n    }\n}\n","// src/index.ts\nimport type { Plugin, Character } from \"@elizaos/core\";\nimport { getOKXActions } from \"./actions\";\n\nexport const OKXPlugin = async (character: Character): Promise<Plugin> => {\n    const getSetting = (key: string) => character.settings?.secrets?.[key] || process.env[key];\n    \n    // Validate required settings\n    const requiredSettings = [\n        \"OKX_API_KEY\",\n        \"OKX_SECRET_KEY\",\n        \"OKX_API_PASSPHRASE\",\n        \"OKX_PROJECT_ID\",\n        \"OKX_SOLANA_RPC_URL\",\n        \"OKX_WALLET_PRIVATE_KEY\",\n    ];\n\n    const missingSettings = requiredSettings.filter(\n        (setting) => !getSetting(setting),\n    );\n    if (missingSettings.length > 0) {\n        console.warn(\n            `Missing required settings for OKX plugin: ${missingSettings.join(\", \")}`\n        );\n        return {\n            name: \"OKX DEX Plugin\",\n            description: \"OKX DEX integration for Solana swaps\",\n            providers: [],\n            evaluators: [],\n            services: [],\n            actions: []\n        };\n    }\n\n    try {\n        console.log(\"Initializing OKX DEX Plugin...\");\n        const actions = await getOKXActions(getSetting);\n        \n        // Simple action display\n        console.log(\"\\nAvailable Actions:\");\n        actions.forEach(action => {\n            console.log(`- ${action.name}: ${action.description}`);\n        });\n        \n        return {\n            name: \"OKX DEX Plugin\",\n            description: \"OKX DEX integration for Solana swaps\",\n            providers: [],\n            evaluators: [],\n            services: [],\n            actions\n        };\n    } catch (error) {\n        console.error(\"Error initializing OKX plugin:\", error);\n        throw error;\n    }\n};\n\nexport default OKXPlugin;"],"mappings":"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","names":[]}